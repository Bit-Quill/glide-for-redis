/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package javababushka.benchmarks.lettuce;

import io.lettuce.core.RedisFuture;
import io.lettuce.core.RedisURI;
import io.lettuce.core.cluster.RedisClusterClient;
import io.lettuce.core.cluster.api.StatefulRedisClusterConnection;
import io.lettuce.core.cluster.api.async.RedisAdvancedClusterAsyncCommands;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javababushka.benchmarks.AsyncClient;
import javababushka.benchmarks.utils.ConnectionSettings;

public class LettuceAsyncClusterClient extends LettuceAsyncClient {

  private RedisClusterClient clusterClient;
  private RedisAdvancedClusterAsyncCommands clusterAsyncCommands;
  private StatefulRedisClusterConnection<String, String> clusterConnection;

  @Override
  public void connectToRedis() {
    connectToRedis(new ConnectionSettings("localhost", 6379, false));
  }

  @Override
  public void connectToRedis(ConnectionSettings connectionSettings) {
    RedisURI uri =
        RedisURI.builder()
            .withHost(connectionSettings.host)
            .withPort(connectionSettings.port)
            .withSsl(connectionSettings.useSsl)
            .build();
    clusterClient = RedisClusterClient.create(uri);
    clusterConnection = client.connect();
    clusterAsyncCommands = connection.async();
  }

  @Override
  public RedisFuture<?> asyncSet(String key, String value) {
    return clusterAsyncCommands.set(key, value);
  }

  @Override
  public RedisFuture<String> asyncGet(String key) {
    return clusterAsyncCommands.get(key);
  }

  @Override
  public void closeConnection() {
    clusterConnection.close();
    clusterClient.shutdown();
  }

  @Override
  public String getName() {
    return "Lettuce Cluster Async";
  }
}
