plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'io.freefair.lombok'
    id "com.wiredforcode.spawn" version "0.8.2"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:32.1.1-jre'
    implementation 'redis.clients:jedis:4.4.3'
    implementation 'io.lettuce:lettuce-core:6.2.6.RELEASE'
    implementation 'commons-cli:commons-cli:1.5.0'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.13.0'

    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.24.3'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

    implementation group: 'io.netty', name: 'netty-handler', version: '4.1.100.Final'
    // https://github.com/netty/netty/wiki/Native-transports
    // Windows is not supported, because babushka does not support windows, because tokio does not support windows, because ... 42
    implementation group: 'io.netty', name: 'netty-transport-native-epoll', version: '4.1.100.Final', classifier: 'linux-x86_64'
    implementation group: 'io.netty', name: 'netty-transport-native-kqueue', version: '4.1.100.Final', classifier: 'osx-x86_64'
    implementation group: 'io.netty', name: 'netty-transport-native-kqueue', version: '4.1.100.Final', classifier: 'osx-aarch_64'

    //testImplementation group: 'org.slf4j', name: 'slf4j-reload4j', version: '2.0.9'
    //testImplementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.9'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'javababushka.benchmarks.BenchmarkingApp'
    mainClass = 'javababushka.benchmarks.clients.babushka.JniNettyClient'
    applicationDefaultJvmArgs += "-Djava.library.path=${projectDir}/../target/release"
}

tasks.withType(Test) { 
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
    jvmArgs "-Djava.library.path=${projectDir}/../target/debug"
}

long unixdump_pid = 0;
/*
task('start_unixdump') {
    var process = new ProcessBuilder()
        .command('sudo', 'unixdump', '-b', '-s', "/run/user/1000/babushka-socket-")
        //.redirectErrorStream(true)
        .redirectError(ProcessBuilder.Redirect.INHERIT)
        .redirectOutput(ProcessBuilder.Redirect.INHERIT)
        //.inheritIO()
        .start()
/*
    InputStream stdout = process.getInputStream()
    BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))

    String line
    while ((line = reader.readLine()) != null) {
        // println line
        if (line.contains('Listening...')) {
            break;
        }
    }
    unixdump_pid = process.pid()
}
/*
task('stop_unixdump') {
    if (unixdump_pid > 0) {
        "sudo killall -9 unixdump".execute().waitFor()
    }
}

//run.dependsOn start_unixdump
//run.finalizedBy stop_unixdump

task startUnixdump(type: SpawnProcessTask) {
    command "unixdump -s /run/user/1000/babushka-socket-*"
    ready 'Listening...'
}
*/
// run.dependsOn startUnixdump

task stopUnixdump(type: KillProcessTask) {
}
