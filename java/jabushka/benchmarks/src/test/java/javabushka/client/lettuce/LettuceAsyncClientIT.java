/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package javabushka.client.lettuce;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import io.lettuce.core.RedisFuture;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class LettuceAsyncClientIT {

    LettuceAsyncClient lettuceClient;

    LettuceAsyncClient otherLettuceClient;

    @Before
    public void initializeJedisClient() {
        lettuceClient = new LettuceAsyncClient();
        lettuceClient.connectToRedis();

        otherLettuceClient = new LettuceAsyncClient();
        otherLettuceClient.connectToRedis();
    }

    @After
    public void closeConnection() {
        lettuceClient.closeConnection();
        otherLettuceClient.closeConnection();
    }

    @Test public void testResourceSetGet() {
        String key = "key1";
        String value = "my-value-1";

        String otherKey = "key2";
        String otherValue = "my-value-2";

        RedisFuture setResult = lettuceClient.set(key, value);
        RedisFuture otherSetResult = otherLettuceClient.set(otherKey, otherValue);

        // and wait for both clients
        try {
            lettuceClient.waitForResult(setResult);
        } catch (Exception e) {
            assertTrue("Can SET redis result without Exception", false);
        }
        try {
            otherLettuceClient.waitForResult(otherSetResult);
        } catch (Exception e) {
            assertTrue("Can SET other redis result without Exception", false);
        }

        RedisFuture getResult = lettuceClient.get(key);
        RedisFuture otherGetResult = otherLettuceClient.get(otherKey);
        String result = "invalid";
        String otherResult = "invalid";
        try {
            result = (String) lettuceClient.waitForResult(getResult);
        } catch (Exception e) {
            assertTrue("Can GET redis result without Exception", false);
        }

        try {
            otherResult = (String) otherLettuceClient.waitForResult(otherGetResult);
        } catch (Exception e) {
            assertTrue("Can GET other redis result without Exception", false);
        }

        assertEquals(value, result);
        assertEquals(otherValue, otherResult);
    }
}
