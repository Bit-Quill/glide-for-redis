/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package javababushka.benchmarks.lettuce;

import io.lettuce.core.RedisFuture;
import io.lettuce.core.RedisURI;
import io.lettuce.core.cluster.RedisClusterClient;
import io.lettuce.core.cluster.api.StatefulRedisClusterConnection;
import io.lettuce.core.cluster.api.async.RedisAdvancedClusterAsyncCommands;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javababushka.benchmarks.AsyncClient;
import javababushka.benchmarks.utils.ConnectionSettings;

public class LettuceAsyncClusterClient implements AsyncClient {

  RedisClusterClient client;
  RedisAdvancedClusterAsyncCommands asyncCommands;
  StatefulRedisClusterConnection<String, String> connection;

  @Override
  public void connectToRedis() {
    connectToRedis(new ConnectionSettings("localhost", 6379, false));
  }

  @Override
  public void connectToRedis(ConnectionSettings connectionSettings) {
    RedisURI uri =
        RedisURI.builder()
            .withHost(connectionSettings.host)
            .withPort(connectionSettings.port)
            .withSsl(connectionSettings.useSsl)
            .build();
    client = RedisClusterClient.create(uri);
    connection = client.connect();
    asyncCommands = connection.async();
  }

  @Override
  public RedisFuture<?> asyncSet(String key, String value) {
    return asyncCommands.set(key, value);
  }

  @Override
  public RedisFuture<String> asyncGet(String key) {
    return asyncCommands.get(key);
  }

  @Override
  public Object waitForResult(Future future) {
    return waitForResult(future, DEFAULT_TIMEOUT);
  }

  @Override
  public Object waitForResult(Future future, long timeoutMS) {
    try {
      return future.get(timeoutMS, TimeUnit.MILLISECONDS);
    } catch (Exception ignored) {
      return null;
    }
  }

  @Override
  public void closeConnection() {
    connection.close();
    client.shutdown();
  }

  @Override
  public String getName() {
    return "Lettuce Async";
  }
}
